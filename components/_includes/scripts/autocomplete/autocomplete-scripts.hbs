<script>

    function getAutocompleteResults(query) {
        var results = [
            'Finibus ipsum <b>' + query + '</b>natis lacus',
            'Mattis <b>' + query + '</b> elementum urna',
            'Blandit aliquet eget <b>' + query + '</b>piscing',
            '<b>' + query + '</b>'
        ];
        return results
            .slice(0, query.length)
            .map(result => ({
                title: result,
                url: '/searchResults?q=' + query
            }));
    }

    var autocomplete = new Autocomplete();

    $(document).ready(function () {
        autocomplete.init(getAutocompleteResults)
    })

    function Autocomplete() {
        this.resultsList;
        this.resultItemTemplate;
        this.getResults;
        this.currentItem = -1;
        this.numberOfItems = 0;

        this.keyCodes = {
            RETURN: 13,
            ESC: 27,
            UP: 38,
            DOWN: 40,
        }
    }

    Autocomplete.prototype.init = function (getResultsFn) {
        this.resultsList = $('#autocomplete-results');
        this.resultItemTemplate = $.parseHTML($('#autocomplete-result-template').html());
        this.getResults = getResultsFn;

        var self = this;

        $('#suggest-search-query').keyup(function (event) {
            var key = event.which || event.keyCode;
            switch (key) {
                case self.keyCodes.DOWN:
                    if (self.currentItem < self.numberOfItems - 1) {
                        self.currentItem++;
                        self.selectItem();
                        event.preventDefault();
                    }
                    break;
                case self.keyCodes.UP:
                    if (self.currentItem > 0) {
                        self.currentItem--;
                        self.selectItem();
                        event.preventDefault();
                    }
                    break;
                default:
                    var results = self.getResults(this.value);
                    self.show(results);
            }

        })
    }

    Autocomplete.prototype.show = function (results) {
        console.log('show');
        this.resultsList.html('');
        this.numberOfItems = results.length;

        for (var key in results) {
            var resultItem = $(this.resultItemTemplate).clone();
            var result = results[key];
            $('.autocomplete__result-link', resultItem).attr('href', result.url);
            $('.autocomplete__result-link', resultItem).html(result.title);
            $(resultItem).attr('id', 'result-item-' + key);
            this.resultsList.append(resultItem);
        }
    }

    Autocomplete.prototype.selectItem = function () {
        console.log(this.currentItem);
        $('.autocomplete__result-link', this.resultsList).removeClass('active').attr('aria-selected', 'false');
        var selectedItem = $('.autocomplete__result-item', this.resultsList)[this.currentItem];
        $('.autocomplete__result-link', selectedItem).addClass('active').attr('aria-selected', 'true');
        $(this.resultsList).attr('aria-activedescendant', 'result-item-' + this.currentItem);
    }

</script>
