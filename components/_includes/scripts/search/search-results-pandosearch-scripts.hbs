<script>
    function Pandosearch(itemsPerPage = 5) {
        this.baseSearchUrl = 'https://public.pandosearch.com/nijmegen.nl/search';
        this.searchUrl;
        this.searchParams = {
            page: 1,
            facetName: null,
            facetValue: null,
        };
        this.query;
        this.rawResults;
        this.itemsPerPage = itemsPerPage;
        this.totalHits = 0;
        this.searchResultsComponent = new SearchResults();
        this.paginationContainer = $('#pagination');
        this.facets;
        this.facetsComponent = new Facets();
        this.facetsContainer = $('#facets');
        this.facetsTranslations;
    }

    Pandosearch.prototype.init = function (facetsTranslations = {}) {
        this.facetsTranslations = facetsTranslations;

        this.searchResultsComponent.init();
        this.facetsComponent.init(this.facetsContainer);
    }

    Pandosearch.prototype.show = function () {
        this.searchParams = this.getParamsFromHash();
        this.buildSearchUrl();

        try {
            $.get(this.searchUrl, this.showResults.bind(this));
        } catch (error) {
            throw new Error(`Pandosearch: failed fetching data with error ${error}`);
        }
    }

    Pandosearch.prototype.buildSearchUrl = function () {
        var url = new URL(window.location.href);
        this.query = url.searchParams.get('q');

        this.searchUrl = this.baseSearchUrl
                + '?size=' + this.itemsPerPage
                + '&page=' + this.searchParams.page
                + (this.searchParams.facetName && this.searchParams.facetValue
                        ? '&facets[' + this.searchParams.facetName + ']=' + this.searchParams.facetValue
                        : '')
                + '&q=' + this.query;
    }

    Pandosearch.prototype.showResults = function (rawResults) {
        this.rawResults = rawResults;
        var hits = this.getHits();

        var didYouMeanTerm;
        if (!hits.length) {
            didYouMeanTerm = this.getDidYouMeanTerm();
            hits = didYouMeanTerm ? this.getDidYouMeanHits() : [];
        }
        this.searchResultsComponent.show(hits, this.query, didYouMeanTerm);

        if (hits.length) {
            var paginationUrl = '?q=' + this.query + '#page={page}';
            if (this.searchParams.facetName && this.searchParams.facetValue) {
                paginationUrl += '&facetName=' + this.searchParams.facetName + '&facetValue=' + this.searchParams.facetValue;
            }
            var pagination = new Pagination(this.getNumberOfPages(), paginationUrl, 5);
            pagination.init(this.paginationContainer);
            pagination.show(parseInt(this.searchParams.page));
        } else {
            this.paginationContainer.hide();
        }

        if (!this.facets) {
            this.facets = this.getFacets();
        }
        this.selectCurrentFacet();
        this.facetsComponent.show(this.facets);
    }

    Pandosearch.prototype.getHits = function () {
        this.totalHits = this.rawResults.total;
        return Array.isArray(this.rawResults.hits)
                ? this.rawResults.hits.map(hit => ({
                    title: hit.fields.title,
                    body: hit.fields.body ? hit.fields.body : '---',
                    url: hit.url
                }))
                : [];
    }

    Pandosearch.prototype.getDidYouMeanTerm = function () {
        return this.rawResults.suggestions ? this.rawResults.suggestions.didyoumean.text : null;
    }

    Pandosearch.prototype.getDidYouMeanHits = function () {
        this.totalHits = this.rawResults.suggestions.didyoumean.result.total;
        return Array.isArray(this.rawResults.suggestions.didyoumean.result.hits)
            ? this.rawResults.suggestions.didyoumean.result.hits.map(hit => ({
                title: hit.fields.title,
                body: hit.fields.body ? hit.fields.body : '---',
                url: hit.url
            }))
            : [];
    }

    Pandosearch.prototype.getFacets = function () {
        var facets = [];
        for (var facetName in this.rawResults.facets) {
            var facetsByName = this.rawResults.facets[facetName].map(facet => ({
                key: facet.key,
                title: this.translateFacetName(facet.display) + ' (' + facet.count + ')',
                url: '?q=' + this.query + '#page=1&facetName=' + facetName + '&facetValue=' + facet.key,
            }));

            if (facetsByName.length) {
                var facetData = {
                    name: facetName,
                    title: this.translateFacetName(facetName),
                    facets: facetsByName,
                };

                facets.push(facetData);
            }
        }
        return facets;
    }

    Pandosearch.prototype.selectCurrentFacet = function () {
        if (!this.searchParams.facetName || !this.searchParams.facetValue) {
            return;
        }

        for (var groupKey in this.facets) {
            var facetGroup = this.facets[groupKey];
            for (var itemKey in facetGroup.facets) {
                var facetItem = facetGroup.facets[itemKey];
                facetItem.active = facetGroup.name === this.searchParams.facetName
                        && facetItem.key === this.searchParams.facetValue;
            }
        }
    }

    Pandosearch.prototype.translateFacetName = function (facetName) {
        return this.facetsTranslations[facetName]
            ? this.facetsTranslations[facetName]
            : facetName;
    }

    Pandosearch.prototype.getNumberOfPages = function () {
        return Math.ceil(this.totalHits / this.itemsPerPage);
    }

    Pandosearch.prototype.getParamsFromHash = function () {
        var hash = window.location.hash.substr(1);
        if (!hash) {
            return this.searchParams;
        }
        var params = hash.split('&').reduce(function (result, item) {
            var parts = item.split('=');
            result[parts[0]] = parts[1];
            return result;
        }, {});

        return Object.assign(this.searchParams, params);
    }
</script>
