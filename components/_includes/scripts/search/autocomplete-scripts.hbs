<script>
    function Autocomplete() {
        this.$resultsList;
        this.resultItemTemplate;
        this.resultHeaderTemplate;
        this.getResults;
        this.currentItem = -1;
        this.numberOfItems = 0;
        this.searchTimeoutId;
        this.searchTimeout = 500;
        this.query;
        this.searching = false;
        this.searchResults = [];
        this.closeTimeoutId;
        this.closeTimeout = 100;

        this.keyCodes = {
            RETURN: 13,
            ESC: 27,
            UP: 38,
            DOWN: 40,
        }
    }

    Autocomplete.prototype.init = function (getResultsFn) {
        this.$resultsList = $('#autocomplete-results');
        this.resultItemTemplate = $.parseHTML($('#autocomplete-result-template').html());
        this.resultHeaderTemplate = $.parseHTML($('#autocomplete-section-header-template').html());
        this.getResults = getResultsFn;

        $('#suggest-search-query').on('keydown keyup', this.inputKeyHandle.bind(this));
        $('#suggest-search-query').blur(this.inputBlurHandle.bind(this));
        $('#suggest-search-query').focus(this.inputFocusHandle.bind(this));
    }

    Autocomplete.prototype.inputBlurHandle = function () {
        clearTimeout(this.closeTimeoutId);
        clearTimeout(this.searchTimeoutId);
        this.closeTimeoutId = setTimeout((function () {
            this.closeResults();
            $('.autocomplete').trigger('close');
            $('.autocomplete .autocomplete__search-button').show();
        }).bind(this), this.closeTimeout);
    }

    Autocomplete.prototype.closeResults = function () {
        this.$resultsList.html('');
        this.$resultsList.hide();
        this.$resultsList.removeAttr('role');
        $('#suggest-search-query').removeAttr('aria-activedescendant');
    }

    Autocomplete.prototype.inputFocusHandle = function () {
        this.show(this.searchResults);
    }

    Autocomplete.prototype.show = function (results) {
        clearTimeout(this.closeTimeoutId);
        this.searchResults = results;
        this.$resultsList.html('');
        this.$resultsList.show();
        this.$resultsList.attr('role', 'listbox');
        this.numberOfItems = results.filter(function (result) { return !result.header; }).length;
        this.currentItem = -1;
        $('.autocomplete .autocomplete__search-button').hide();
        $('#autocomplete-search-results-announcer').text(
            this.query
                ? 'Er zijn ' + results.length + ' zoekresultaten gevonden voor de zoekterm: ' + this.query
                : ''
        );

        if (results.length === 0) {
            this.closeResults();
            this.searching = false;
            return;
        }

        var itemNr = 0;
        for (var key in results) {
            var result = results[key];
            if (result.header) {
                var resultHeader = $(this.resultHeaderTemplate).clone();
                resultHeader.text(result.header);
                this.$resultsList.append(resultHeader);
                continue;
            }
            var resultItem = $(this.resultItemTemplate).clone();
            $('.autocomplete__result-link', resultItem)
                .html(result.title)
                .attr('href', result.url)
                .attr('id', 'result-item-' + itemNr)
                .mouseenter(this.itemMouseHandle.bind(this));
            itemNr++;
            if (result.class) {
                $('.autocomplete__result-link', resultItem).addClass(result.class);
            }
            this.$resultsList.append(resultItem);
        }

        this.searching = false;
    }

    Autocomplete.prototype.selectItem = function (scrollToElement) {
        $('.autocomplete__result-link', this.$resultsList).removeClass('active').removeAttr('aria-selected');

        if (this.currentItem < 0) {
            return;
        }
        var selectedItem = $('#result-item-' + this.currentItem);
        selectedItem.addClass('active').attr('aria-selected', 'true');
        if (scrollToElement) {
            $(selectedItem)[0].scrollIntoView();
        }
        $('#suggest-search-query').attr('aria-activedescendant', 'result-item-' + this.currentItem);
    }

    Autocomplete.prototype.itemMouseHandle = function (event) {
        var id = event.target.id.replace('result-item-', '');
        this.currentItem = parseInt(id);
        this.selectItem();
    }

    Autocomplete.prototype.inputKeyHandle = function (event) {
        var key = event.which || event.keyCode;
        switch (key) {
            case this.keyCodes.DOWN:
                if (event.type === 'keyup') {
                    break;
                }
                if (this.currentItem < this.numberOfItems - 1) {
                    this.currentItem++;
                    this.selectItem(true);
                    event.preventDefault();
                }
                break;
            case this.keyCodes.UP:
                if (event.type === 'keyup') {
                    break;
                }
                if (this.currentItem > 0) {
                    this.currentItem--;
                    this.selectItem(true);
                    event.preventDefault();
                }
                break;
            case this.keyCodes.RETURN:
                if (this.currentItem < 0) {
                    break;
                }
                var link = $('#result-item-' + this.currentItem, this.$resultsList).attr('href');
                window.location = link;
                event.preventDefault();
                break;
            case this.keyCodes.ESC:
                if (event.type === 'keyup') {
                    break;
                }
                event.target.value = '';
                if (this.searchResults.length > 0) {
                    this.show([]);
                    event.preventDefault();
                    break;
                }
                $('.autocomplete').trigger('close');
                break;
            default:
                this.query = event.target.value;
                if (this.searching) {
                    break;
                }
                if (this.searchTimeoutId) {
                    clearTimeout(this.searchTimeoutId);
                }
                this.searchTimeoutId = setTimeout(this.search.bind(this), this.searchTimeout);
        }
    }

    Autocomplete.prototype.search = function () {
        this.searching = true;
        this.getResults(this.query, this.show.bind(this));
    }
</script>
