variables:
  FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/frontend
  IMAGE_TAG: $CI_COMMIT_REF_SLUG

# ======================
# CI Stages
# ======================

stages:
  - test
  - build
  - regression
  - push
  - deploy
  - release

# ======================
# Snippets
# ======================

.docker-compose: &docker-compose
  image: docker/compose:alpine-1.25.4
  services:
    - docker:19-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - export VERSION=v`helpers/getVersion.sh`

# ======================
# Testing
# ======================

lint js:
  stage: test
  image: node:12.14-alpine
  script:
    - apk add git
    - npm ci
    - npm run lint-js

lint sass:
  stage: test
  image: node:12.14-alpine
  script:
    - apk add git
    - npm ci
    - npm run lint-sass

jest:
  stage: test
  <<: *docker-compose
  script:
    - docker-compose -f docker-compose.jest.yml up -d
    - docker-compose -f docker-compose.jest.yml run frontend sh -c 'apk add git && npm ci'
    - docker-compose -f docker-compose.jest.yml run frontend npm test

# ======================
# Build stage
# ======================

build image:
  stage: build
  <<: *docker-compose
  script:
    - docker pull $FRONTEND_IMAGE:latest || true
    - docker-compose -f docker-compose.ci.yml pull -q frontend || true
    - docker-compose -f docker-compose.ci.yml build frontend
    - docker-compose -f docker-compose.ci.yml push frontend

# ======================
# Regression stage
# ======================

regression:
  stage: regression
  <<: *docker-compose
  script:
    - docker-compose -f docker-compose.ci.yml pull -q
    - docker-compose -f docker-compose.ci.yml up -d frontend
    - docker-compose -f docker-compose.ci.yml run -T wait-for-frontend
    - docker-compose -f docker-compose.ci.yml run -T regression --parallel 10 --world-parameters "`cat test/regression/defaults.json`"
  artifacts:
    paths:
      - test/regression/results/screenshots/
    expire_in: 1 week
    when: on_failure

# ======================
# Push stage
# ======================

push latest image:
  stage: push
  <<: *docker-compose
  script:
    - docker pull $FRONTEND_IMAGE:$IMAGE_TAG
    - docker tag $FRONTEND_IMAGE:$IMAGE_TAG $FRONTEND_IMAGE:latest
    - docker push $FRONTEND_IMAGE:latest
  only:
    - master

# ======================
# Deploy stage acceptance
# ======================

deploy acceptance:
  stage: deploy
  image: enrise/kube-toolbox:amazon
  services:
    - docker:19-dind
  environment:
    name: acceptance
    url: https://componenten.acc.nijmegen.nl
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  script:
    - mkdir release
    - docker cp $(docker create $FRONTEND_IMAGE:$IMAGE_TAG):/usr/share/nginx/html release/
    - aws s3 cp release/html s3://gemeentenijmegen-public-acceptance-componenten-nijmegen-nl/ --recursive --acl public-read --exclude "index.html" --exclude "version.json" --cache-control=public,max-age=31536000
    - aws s3 cp release/html s3://gemeentenijmegen-public-acceptance-componenten-nijmegen-nl/ --recursive --acl public-read --exclude "*" --include "index.html" --include "version.json" --cache-control max-age=0,no-cache,no-store,must-revalidate
  only:
    - master

# ======================
# Release stage
# ======================

create production release:
  stage: release
  image: node:12.14-alpine
  before_script:
    - apk add --no-cache git
    - git config --global user.email "epic@enrise.com"
    - git config --global user.name "EPIC"
  script:
    - git fetch origin ${CI_COMMIT_REF_NAME}
    - git checkout ${CI_COMMIT_REF_NAME}
    - npm ci
    - npm run create-release
    - git push https://gitlab-ci-token:${GNIJ_ACCESS_TOKEN}@gitlab.enrise.com/Epic/nijmegen-component-library.git/
    - git push https://gitlab-ci-token:${GNIJ_ACCESS_TOKEN}@gitlab.enrise.com/Epic/nijmegen-component-library.git/ --tags
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      exists: [changelogs/unreleased/*.yml]
      when: manual # Run only when we are on the master branch and there are unreleased changelog items

# ======================
# Deploy stage production
# ======================

deploy production:
  stage: deploy
  image: enrise/kube-toolbox:amazon
  services:
    - docker:19-dind
  environment:
    name: production
    url: https://componenten.nijmegen.nl
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  script:
    - mkdir release
    - docker cp $(docker create $FRONTEND_IMAGE:$IMAGE_TAG):/usr/share/nginx/html release/
    - aws s3 cp release/html s3://gemeentenijmegen-public-production-componenten-nijmegen-nl/ --recursive --acl public-read --exclude "index.html" --exclude "version.json" --cache-control=public,max-age=31536000
    - aws s3 cp release/html s3://gemeentenijmegen-public-production-componenten-nijmegen-nl/ --recursive --acl public-read --exclude "*" --include "index.html" --include "version.json" --cache-control max-age=0,no-cache,no-store,must-revalidate
  only:
    - tags
