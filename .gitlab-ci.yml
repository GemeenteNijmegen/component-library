# ======================
# CI Stages
# ======================

stages:
  - build
  - deploy

# ======================
# Global variables
# ======================

variables:
  DOCKER_DRIVER: overlay2
  SERVICE_NAME: componentlibrary-versioned

# ======================
# Snippets
# ======================

.prepare-ssh: &prepare-ssh
  before_script:
    - export DOCKER_TAG="$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID";
    - apk --no-cache add openssh
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    # Add private key
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    # Add host keys
    - mkdir /root/.ssh/
    - echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts
    # Cleanup old socket
    - rm -f docker-socket-ssh

# ======================
# Build stage
# ======================

build release:
  stage: build
  services:
    - docker:dind
  before_script:
    - apk --no-cache add python py-pip
    - pip install --upgrade docker-compose
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - export DOCKER_TAG="$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID";
  script:
    - docker build . -t "$CI_REGISTRY_IMAGE":$DOCKER_TAG -f Dockerfile-prod
    - docker push "$CI_REGISTRY_IMAGE":$DOCKER_TAG
    - docker run
      -w /app
      -v "$PWD":/app
      -e GITLAB_TOKEN
      -e CI_COMMIT_REF_NAME
      -e CI_REGISTRY_IMAGE
      -e DOCKER_TAG
      -e STABLE_RELEASE
      node:8.11.2-alpine
      yarn update-releases
  only:
    - /^release\/.*$/

#build test:
#  stage: build
#  services:
#    - docker:dind
#  before_script:
#    - apk --no-cache add python py-pip
#    - pip install --upgrade docker-compose
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#    - export DOCKER_TAG="$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID";
#  script:
#    - docker build . -f Dockerfile-prod
#  except:
#    - /^release\/.*$/

build tester:
  stage: build
  services:
  - docker:dind
  before_script:
  - apk --no-cache add python py-pip git
  - pip install --upgrade docker-compose
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - export DOCKER_TAG="$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID";
  - git config --global user.email "swallis@enrise.com"
  - git config --global user.name "swallis"
  script:
  - docker build . -f Dockerfile-prod
  - docker run
    -w /app
    -v "$PWD":/app
    -e GITLAB_TOKEN
    -e CI_COMMIT_REF_NAME
    -e CI_REGISTRY_IMAGE
    -e DOCKER_TAG
    -e STABLE_RELEASE
    node:8.11.2-alpine
    yarn add js-yaml
    node dev/release/changelogs/update "2.0.0"
  except:
  - /^release\/.*$/

#  - git fetch origin ${CI_COMMIT_REF_NAME}
#  - git checkout ${CI_COMMIT_REF_NAME}
#  - git pull origin ${CI_COMMIT_REF_NAME}
#  - git add docs/03-Changelog.md
#  - git commit -m "${CI_COMMIT_REF_NAME} changelog update"
#  - git push https://gitlab-ci-token:${GNIJ_ACCESS_TOKEN}@gitlab.enrise.com/Epic/nijmegen-component-library.git/

# ======================
# Deploy stage
# ======================

deploy acceptance:
  stage: deploy
  services:
    - docker:dind
  environment:
    name: acceptance
    url: https://componenten.acc.nijmegen.nl
  <<: *prepare-ssh
  script:
    # Setup SSH tunnel to Docker Engine
    - ssh -o ProxyCommand="ssh -W %h:%p -q enrise@jump01.nijmegen.cobytes.io" -M -S docker-socket-ssh -fnNT -L 50040:127.0.0.1:2375 enrise-docker-deploy@acc01.nijmegen.cobytes.io
    - ssh -S docker-socket-ssh -O check enrise-docker-deploy@acc01.nijmegen.cobytes.io
    # Let Docker authenticate against the GitLab registry
    - DOCKER_HOST=tcp://127.0.0.1:50040 docker login -u gitlab+deploy-token-2 -p $DEPLOY_TOKEN $CI_REGISTRY
    # Generate docker-compose.yml
    - docker run
      -w /app
      -v "$PWD":/app
      -e GITLAB_TOKEN
      -e CI_COMMIT_REF_NAME
      -e CI_REGISTRY_IMAGE
      -e CI_ENVIRONMENT_URL
      -e DOCKER_TAG
      -e STABLE_RELEASE
      node:8.11.2-alpine
      yarn prepare-deployment
    # Deploy the stack
    - DOCKER_HOST=tcp://127.0.0.1:50040 docker stack deploy --with-registry-auth --compose-file=docker-compose-stack.yml ${SERVICE_NAME}
    # Exit SSH tunnel
    - ssh -S docker-socket-ssh -O exit enrise-docker-deploy@acc01.nijmegen.cobytes.io
  only:
    - /^release\/.*$/

deploy production:
  stage: deploy
  services:
    - docker:dind
  environment:
    name: production
    url: https://componenten.nijmegen.nl
  when: manual
  <<: *prepare-ssh
  script:
    # Setup SSH tunnel to Docker Engine
    - ssh -o ProxyCommand="ssh -W %h:%p -q enrise@jump01.nijmegen.cobytes.io" -M -S docker-socket-ssh -fnNT -L 50040:127.0.0.1:2375 enrise-docker-deploy@containerprod01.nijmegen.cobytes.io
    - ssh -S docker-socket-ssh -O check enrise-docker-deploy@containerprod01.nijmegen.cobytes.io
    # Let Docker authenticate against the GitLab registry
    - DOCKER_HOST=tcp://127.0.0.1:50040 docker login -u gitlab+deploy-token-2 -p $DEPLOY_TOKEN $CI_REGISTRY
    # Generate docker-compose.yml
    - docker run
      -w /app
      -v "$PWD":/app
      -e GITLAB_TOKEN
      -e CI_COMMIT_REF_NAME
      -e CI_REGISTRY_IMAGE
      -e CI_ENVIRONMENT_URL
      -e DOCKER_TAG
      -e STABLE_RELEASE
      node:8.11.2-alpine
      yarn prepare-deployment
    # Deploy the stack
    - DOCKER_HOST=tcp://127.0.0.1:50040 docker stack deploy --with-registry-auth --compose-file=docker-compose-stack.yml ${SERVICE_NAME}
    # Exit SSH tunnel
    - ssh -S docker-socket-ssh -O exit enrise-docker-deploy@containerprod01.nijmegen.cobytes.io
  only:
    - /^release\/.*$/
