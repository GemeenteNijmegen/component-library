variables:
  FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/frontend
  IMAGE_TAG: $CI_COMMIT_REF_SLUG

# ======================
# CI Stages
# ======================

stages:
  - changelog
  - test
  - build
  - regression
  - deploy

# ======================
# Snippets
# ======================

.docker-compose: &docker-compose
  image: docker/compose:alpine-1.25.4
  services:
    - docker:19-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - export VERSION=v`helpers/getVersion.sh`

.preventDoublePipelineTrigger: &preventDoublePipelineTrigger
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      exists: [changelogs/unreleased/*.yml]
      when: never # On master do not run when there are unreleased changelog items (to avoid running the pipeline twice)
    - if: $CI_MERGE_REQUEST_ID
      when: never # Don't run a pipeline for a merge request, it's already testing the branch of the mr
    - when: on_success # Run on master without unreleased changelog items


# ======================
# Changelog stage
# ======================

update changelog:
  stage: changelog
  image: node:12.14-alpine
  before_script:
    - apk add --no-cache git
    - git config --global user.email "epic@enrise.com"
    - git config --global user.name "EPIC"
  script:
    - git fetch origin ${CI_COMMIT_REF_NAME}
    - git checkout ${CI_COMMIT_REF_NAME}
    - npm ci
    - npm run create-release
    - git add --all
    - git commit -m "Update changelog on ${CI_COMMIT_REF_NAME}"
    - git push https://gitlab-ci-token:${GNIJ_ACCESS_TOKEN}@gitlab.enrise.com/Epic/nijmegen-component-library.git/
    - git push https://gitlab-ci-token:${GNIJ_ACCESS_TOKEN}@gitlab.enrise.com/Epic/nijmegen-component-library.git/ --tags
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      exists: [changelogs/unreleased/*.yml]
      when: on_success # Run only when we are on the master branch and there are unreleased changelog items

# ======================
# Testing
# ======================

lint js:
  stage: test
  image: node:12.14-alpine
  script:
    - apk add git
    - npm ci
    - npm run lint-js
  <<: *preventDoublePipelineTrigger

lint sass:
  stage: test
  image: node:12.14-alpine
  script:
    - apk add git
    - npm ci
    - npm run lint-sass
  <<: *preventDoublePipelineTrigger

jest:
  stage: test
  <<: *docker-compose
  script:
    - docker-compose -f docker-compose.jest.yml up -d
    - docker-compose -f docker-compose.jest.yml run frontend sh -c 'apk add git && npm ci'
    - docker-compose -f docker-compose.jest.yml run frontend npm test
  <<: *preventDoublePipelineTrigger

# ======================
# Build stage
# ======================

build image:
  stage: build
  <<: *docker-compose
  script:
    - docker pull $FRONTEND_IMAGE:latest || true
    - docker-compose -f docker-compose.ci.yml pull -q frontend || true
    - docker-compose -f docker-compose.ci.yml build frontend
    - docker-compose -f docker-compose.ci.yml push frontend
  <<: *preventDoublePipelineTrigger

# ======================
# Regression stage
# ======================

regression:
  stage: regression
  <<: *docker-compose
  script:
    - docker-compose -f docker-compose.ci.yml pull -q
    - docker-compose -f docker-compose.ci.yml up -d frontend
    - docker-compose -f docker-compose.ci.yml run -T wait-for-frontend
    - docker-compose -f docker-compose.ci.yml run -T regression --parallel 10 --world-parameters "`cat test/regression/defaults.json`"
  artifacts:
    paths:
      - test/regression/results/screenshots/
    expire_in: 1 week
    when: on_failure
  <<: *preventDoublePipelineTrigger

# ======================
# Push stage
# ======================

push-frontend:
  stage: deploy
  <<: *docker-compose
  script:
    - docker pull $FRONTEND_IMAGE:$IMAGE_TAG
    - docker tag $FRONTEND_IMAGE:$IMAGE_TAG $FRONTEND_IMAGE:latest
    - docker push $FRONTEND_IMAGE:latest
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      exists: [changelogs/unreleased/*.yml]
      when: never # On master do not run when there are unreleased changelog items (to avoid running the pipeline twice)
    - if: $CI_COMMIT_REF_NAME == "master"
      when: on_success

# ======================
# Deploy stage
# ======================

deploy acceptance:
  stage: deploy
  image: enrise/kubetoolbox:amazon
  environment:
    name: acceptance
    url: https://componenten.acc.nijmegen.nl
  script:
    - docker cp $FRONTEND_IMAGE:$IMAGE_TAG:/usr/share/nginx/html release/
    - aws s3 sync release/ s3://nijmegen-cl-acc/ --exclude "index.html" --exclude "version.json" --cache-control=31536000,public
    - aws s3 sync release/ s3://nijmegen-cl-acc/ --exclude "*" --include "index.html" --include "version.json" --cache-control max-age=0,no-cache,no-store,must-revalidate
#  only:
#    - tags

